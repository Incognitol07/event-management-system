// Event Management System
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Core User model - simplified roles
model User {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  role     Role    @default(STUDENT)
  matricNo String?

  // Relationships
  organizedEvents Event[]     @relation("EventOrganizer")
  attendedEvents  EventRSVP[]
  feedback        Feedback[]

  @@map("users")
}

enum Role {
  ADMIN
  STAFF
  STUDENT
}

// Simplified Venue model
model Venue {
  id       Int    @id @default(autoincrement())
  name     String
  capacity Int

  // Relationships
  events Event[]

  @@map("venues")
}

// Core Event model with essential fields
model Event {
  id          Int           @id @default(autoincrement())
  title       String
  description String // Max 300 words enforced in app logic
  date        DateTime
  startTime   String // Store as string for simplicity (HH:MM format)
  endTime     String
  venueId     Int
  capacity    Int
  memo        String
  isApproved  Boolean       @default(false)
  priority    Priority      @default(NORMAL)
  category    EventCategory @default(ACADEMIC)
  department  String? // Optional department/organization
  createdById Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relationships
  venue     Venue       @relation(fields: [venueId], references: [id])
  createdBy User        @relation("EventOrganizer", fields: [createdById], references: [id])
  rsvps     EventRSVP[]
  feedback  Feedback[]

  @@map("events")
}

enum Priority {
  LOW
  NORMAL
  HIGH
  EMERGENCY
}

enum EventCategory {
  ACADEMIC
  SPIRITUAL
  SOCIAL
  STUDENT_ORG
  SPORTS
  CULTURAL
  ADMINISTRATIVE
}

// Simplified RSVP system
model EventRSVP {
  id      Int        @id @default(autoincrement())
  eventId Int
  userId  Int
  status  RSVPStatus @default(PENDING)
  rsvpAt  DateTime   @default(now())

  // Relationships
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_rsvps")
}

enum RSVPStatus {
  PENDING
  ACCEPTED
  DECLINED
}

// Simple feedback system
model Feedback {
  id        Int      @id @default(autoincrement())
  eventId   Int
  userId    Int
  rating    Int // 1-5 scale
  comment   String?
  createdAt DateTime @default(now())

  // Relationships
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("feedback")
}
