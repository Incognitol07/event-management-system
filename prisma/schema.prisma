// Event Management System
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Core User model - simplified roles
model User {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  role     Role    @default(STUDENT)
  matricNo String?

  // Relationships
  organizedEvents   Event[]          @relation("EventOrganizer")
  coOrganizedEvents EventOrganizer[] // Many-to-many relationship for co-organizing
  attendedEvents    EventRSVP[]
  feedback          Feedback[]

  @@map("users")
}

enum Role {
  ADMIN
  ORGANIZER
  STUDENT
}

enum OrganizerRole {
  PRIMARY_ORGANIZER // The main organizer (usually the creator)
  CO_ORGANIZER // Additional organizers who can manage the event
}

// Simplified Venue model
model Venue {
  id       Int    @id @default(autoincrement())
  name     String
  capacity Int

  // Relationships
  events Event[]

  @@map("venues")
}

// Core Event model with essential fields
model Event {
  id             Int             @id @default(autoincrement())
  title          String
  description    String // Max 300 words enforced in app logic
  date           DateTime
  startTime      String // Store as string for simplicity (HH:MM format)
  endTime        String
  venueId        Int
  capacity       Int
  memo           String
  isApproved     Boolean         @default(false)
  priority       Priority        @default(NORMAL)
  category       EventCategory   @default(ACADEMIC)
  department     String? // Optional department/organization
  createdById    Int // Primary organizer (for backward compatibility)
  // Recurring event fields
  isRecurring    Boolean         @default(false)
  recurrenceType RecurrenceType?
  recurrenceEnd  DateTime?

  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt // Relationships
  venue      Venue            @relation(fields: [venueId], references: [id])
  createdBy  User             @relation("EventOrganizer", fields: [createdById], references: [id])
  organizers EventOrganizer[] // Many-to-many relationship for all organizers
  rsvps      EventRSVP[]
  feedback   Feedback[]
  resources  EventResource[]

  @@map("events")
}

// Junction table for Event-Organizer many-to-many relationship
model EventOrganizer {
  id      Int           @id @default(autoincrement())
  eventId Int
  userId  Int
  role    OrganizerRole @default(CO_ORGANIZER)
  addedAt DateTime      @default(now())
  addedBy Int? // Who added this organizer

  // Relationships
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_organizers")
}

enum Priority {
  LOW
  NORMAL
  HIGH
  EMERGENCY
}

enum RecurrenceType {
  DAILY
  WEEKLY
  MONTHLY
}

enum EventCategory {
  ACADEMIC
  SPIRITUAL
  SOCIAL
  STUDENT_ORG
  SPORTS
  CULTURAL
  ADMINISTRATIVE
}

// Simplified RSVP system
model EventRSVP {
  id      Int        @id @default(autoincrement())
  eventId Int
  userId  Int
  status  RSVPStatus @default(PENDING)
  rsvpAt  DateTime   @default(now())

  // Relationships
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_rsvps")
}

enum RSVPStatus {
  PENDING
  ACCEPTED
  DECLINED
}

// Simple feedback system
model Feedback {
  id        Int      @id @default(autoincrement())
  eventId   Int
  userId    Int
  rating    Int // 1-5 scale
  comment   String?
  createdAt DateTime @default(now())

  // Relationships
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("feedback")
}

// Resource management models
model Resource {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  category    ResourceCategory
  totalCount  Int              @default(1) // Total available quantity
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relationships
  eventResources EventResource[]

  @@map("resources")
}

enum ResourceCategory {
  AUDIO_VISUAL // Projectors, microphones, speakers, laptops
  FURNITURE // Tables, chairs, staging platforms
  TECHNICAL_STAFF // IT support, AV technicians
  CATERING // Catering equipment, serving tables
  TRANSPORTATION // Buses, vans
  SECURITY // Security personnel
  OTHER // Miscellaneous resources
}

// Junction table for Event-Resource many-to-many relationship
model EventResource {
  id             Int            @id @default(autoincrement())
  eventId        Int
  resourceId     Int
  quantityNeeded Int            @default(1)
  status         ResourceStatus @default(PENDING)
  approvedAt     DateTime?
  approvedBy     Int? // Admin who approved the resource
  notes          String? // Additional notes about resource allocation
  createdAt      DateTime       @default(now())

  // Relationships
  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  resource Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([eventId, resourceId])
  @@map("event_resources")
}

enum ResourceStatus {
  PENDING // Awaiting approval
  APPROVED // Resource allocated
  DENIED // Request denied
  CANCELLED // Request cancelled
}
